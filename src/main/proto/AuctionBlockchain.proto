syntax = "proto3";


option java_multiple_files = true;
option java_package = "pt.up.fc.dcc.ssd.auctionblockchain";
option java_outer_classname = "AuctionBlockchainProto";
option objc_class_prefix = "ABC";

package auctionblockchain;

service AuctionBlockchain {
    rpc Ping(KademliaNodeProto) returns (KademliaNodeProto) {}

    rpc Store(StoreRequest) returns (StoreResponse) {}

    rpc FindNode(FindNodeRequest) returns (FindNodeResponse) {}

    rpc FindValue(FindValueRequest) returns (FindValueResponse) {}
}



message NodeIDProto {
    bytes id = 1;
}

message KademliaNodeProto {
    string ipAddress = 1;
    uint32 port = 2;
    NodeIDProto nodeID = 3;
}

message KBucketProto {
    repeated KademliaNodeProto nodes = 1;
}



message StoreRequest {
    KademliaNodeProto node = 1;
    bytes key = 2;
    oneof BlockOrTransactionOrAuctionOrBid {
        BlockProto block = 3;
        TransactionProto transaction = 4;
        AuctionProto auction = 5;
        BidProto bid = 6;
    }
}

message StoreResponse {
    KademliaNodeProto node = 1;
    bool success = 2;
}



message FindNodeRequest {
    KademliaNodeProto node = 1;
    NodeIDProto requestedNodeId = 2;
}

message FindNodeResponse {
    KademliaNodeProto node = 1;
    KBucketProto bucket = 2;
}



message FindValueRequest {
    KademliaNodeProto node = 1;
    bytes key = 2;
}

message FindValueResponse {
    KademliaNodeProto node = 1;
    oneof BlockOrTransactionsOrNodesOrAuctionsOrBids {
        BlockProto block = 2;
        MempoolProto transactions = 3;
        KBucketProto bucket = 4;
        AuctionListProto auctions = 5;
        BidListProto bids = 6;
    }
}




message BidProto {
    bytes itemId = 1;
    bytes sellerID = 2;
    bytes buyerID = 3;
    fixed64 amount = 4;
    fixed64 fee = 5;
    bytes buyerPublicKey = 6;
    bytes hash = 7;
    bytes signature = 8;
}


message TransactionProto {
    BidProto bid = 1;
    bytes sellerPublicKey = 2;
    fixed64 timestamp = 3;
    bytes hash = 4;
    bytes signature = 5;
}


message AuctionProto {
    bytes itemId = 1;
    bytes sellerId = 2;
    fixed64 minAmount = 4;
    float minIncrement = 5;
    fixed64 fee = 6;
    fixed64 timeout = 7;
    bytes sellerPublicKey = 8;
    bytes hash = 9;
    bytes signature = 10;
}


message AuctionListProto {
    repeated AuctionProto auctions = 1;
}

message BidListProto {
    repeated BidProto bids = 1;
}



//message PublicKeyProto {
//    bytes key = 1;
//}
//
//message SignatureProto {
//    bytes signature = 1;
//}

// hash - The hash of the referenced transaction.
// index - The index of the specific output in the transaction. The first output is 0, etc.
//message OutPoint {
//    bytes hash = 1;
//    fixed32 index = 2;
//}

// previousOutput - The previous output transaction reference, as an OutPoint structure.
// signatureScript - Computational Script for confirming transaction authorization.
//message TxIn {
//    OutPoint previousOutput = 1;
//    bytes signatureScript = 2;
//}

// value - Transaction Value.
// pkScript - Usually contains the public key as a Bitcoin script setting up conditions to claim this output.
//message TxOut {
//    fixed64 value = 1;
//    PublicKeyProto pkScript = 2;
//}

// txIn - A list of 1 or more transaction inputs or sources for coins.
// txOut - A list of 1 or more transaction outputs or destinations for coins.
//message TransactionProto {
//    repeated TxIn txIn = 1;
//    repeated TxOut txOut = 2;
//}

//message TransactionProto {
//    bytes sellerID = 1;
//    bytes buyerID = 2;
//    fixed64 amount = 3;
//    fixed64 fee = 4;
//    fixed64 itemID = 5;
//    bytes buyerPublicKey = 6;
//    fixed64 timestamp = 7;
//    bytes hash = 8;
//    bytes signature = 9;
//}

message MempoolProto {
    repeated TransactionProto transactions = 1;
}

// nonce - The nonce used to generate this blockâ€¦ to allow variations of the header and compute different hashes.
message BlockHeaderProto {
    bytes previousWork = 1;
    bytes prevBlock = 2;
    bytes merkleRoot = 3;
    fixed64 timestamp = 4;
    fixed32 difficulty = 5;
    fixed64 nonce = 6;
}

message BlockProto {
    BlockHeaderProto blockHeader = 1;
    TransactionProto reward = 2;
    repeated TransactionProto transactions = 3;
}

message BlockChainProto {
    repeated BlockProto blocks = 1;
}

